/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/entities/{entity_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update entity onboarding documents
         * @description Update the onboarding documents of an entity.
         */
        post: operations["post_entities_id_documents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_policies/{approval_policy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        get: operations["get_approval_policies_id"];
        put?: never;
        post?: never;
        /**
         * Delete an approval policy
         * @description Delete an existing approval policy.
         */
        delete: operations["delete_approval_policies_id"];
        options?: never;
        head?: never;
        /**
         * Update an approval policy
         * @description Update an existing approval policy.
         */
        patch: operations["patch_approval_policies_id"];
        trace?: never;
    };
    "/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a files by ID */
        get: operations["get_files"];
        put?: never;
        /** Upload a files by ID */
        post: operations["post_files"];
        /** Delete all files */
        delete: operations["delete_files"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/trash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Trash files */
        delete: operations["trash_files"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a file list
         * @deprecated
         */
        get: operations["get_file_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        EntityOnboardingDocuments: {
            verification_document_front: string;
            verification_document_back?: string;
        };
        ErrorSchema: {
            message: string;
        };
        ErrorSchemaResponse: {
            error: components["schemas"]["ErrorSchema"];
        };
        HTTPValidationError: {
            detail?: components["schemas"]["ValidationError"][];
        };
        ValidationError: {
            loc: (string | number)[];
            msg: string;
            type: string;
        };
        ApprovalPolicyUpdate: {
            /** @description The name of the approval policy. */
            name?: string;
            /** @description A brief description of the approval policy. */
            description?: string;
            /** @description A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object. */
            script?: (boolean | number | string | unknown[] | Record<string, never>)[];
            /**
             * @description A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.
             * @example {amount >= 1000}
             */
            trigger?: boolean | number | string | unknown[] | Record<string, never>;
            /** @description A string that represents the current status of the approval policy. */
            status?: components["schemas"]["ApprovalPolicyStatus"];
        };
        /**
         * @description An enumeration.
         * @enum {string}
         */
        ApprovalPolicyStatus: "active" | "deleted" | "pending";
        ApprovalPolicyResource: {
            /** @description The name of the approval policy. */
            name: string;
            /** @description A brief description of the approval policy. */
            description: string;
            /** Format: uuid */
            id: string;
        };
        /**
         * @description An enumeration.
         * @enum {string}
         */
        OrderEnum: "asc" | "desc";
        FilesResponse: {
            data: components["schemas"]["FileResponse"][];
        };
        FileResponse: {
            /** Format: uuid */
            id: string;
            file_type: string;
            name: string;
            url: string;
        };
    };
    responses: never;
    parameters: {
        IdIn: string[];
        /** @example 2023-06-04 */
        XMoniteVersion: string;
    };
    requestBodies: {
        EntityOnboardingDocuments: {
            content: {
                "application/json": components["schemas"]["EntityOnboardingDocuments"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    post_entities_id_documents: {
        parameters: {
            query?: {
                /** @description Document referer */
                referer?: string;
            };
            header: {
                /** @example 2023-06-04 */
                "x-monite-version": string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["EntityOnboardingDocuments"];
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        header?: {
                            /** Format: date */
                            "x-monite-version"?: string;
                        };
                        path?: {
                            /** Format: uuid */
                            entity_id?: string;
                        };
                        query?: {
                            /** @description Referer of the document */
                            referer?: string;
                        };
                        body?: {
                            verification_document_front?: string;
                            verification_document_back?: string;
                        };
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Unexpected error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_approval_policies_id: {
        parameters: {
            query?: {
                /** @description Order by */
                items_order?: components["schemas"]["OrderEnum"][];
            };
            header: {
                /** @example 2023-06-04 */
                "x-monite-version": string;
                "x-monite-entity-id": string;
            };
            path: {
                approval_policy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        header?: {
                            /** Format: date */
                            "x-monite-version"?: string;
                        };
                        path?: {
                            /** Format: uuid */
                            approval_policy_id?: string;
                        };
                        query?: {
                            /** @description Order by */
                            items_order?: components["schemas"]["OrderEnum"][];
                        };
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_approval_policies_id: {
        parameters: {
            query?: {
                /** @description Limit of records to delete */
                limit?: number;
            };
            header: {
                /** @example 2023-06-04 */
                "x-monite-version": string;
                "x-monite-entity-id": string;
            };
            path: {
                approval_policy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                        limit?: number;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_approval_policies_id: {
        parameters: {
            query?: {
                /** @description Limit of records to patch */
                limit?: number;
            };
            header: {
                /** @example 2023-06-04 */
                "x-monite-version": string;
                "x-monite-entity-id": string;
            };
            path: {
                approval_policy_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApprovalPolicyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalPolicyResource"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_files: {
        parameters: {
            query: {
                id__in: string[];
                /** @description Page number */
                page?: string;
            };
            header: {
                /** @example 2023-06-04 */
                "x-monite-version": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        header?: {
                            /** Format: date */
                            "x-monite-version"?: string;
                        };
                        query?: {
                            id__in?: string[];
                            /** @description Page number */
                            page?: string;
                        };
                    };
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_files: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: Blob;
                    file_description?: string;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        body?: {
                            file?: string;
                            file_description?: string;
                        };
                    };
                };
            };
            /** @description Internal Server Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_files: {
        parameters: {
            query?: {
                all?: boolean;
                pendingOnly?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        query?: {
                            all?: boolean;
                        };
                    };
                };
            };
            /** @description No Content - Operation completed successfully, no data returned */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    trash_files: {
        parameters: {
            query?: {
                pendingOnly?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        query?: {
                            all?: boolean;
                        };
                    };
                    /**
                     * Format: binary
                     * @description Successfully deleted file dump
                     */
                    "application/octet-stream": unknown;
                };
            };
            /** @description No files trashed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_file_list: {
        parameters: {
            query?: {
                id__in?: components["parameters"]["IdIn"];
            };
            header?: {
                /** @example 2023-06-04 */
                "x-monite-version"?: components["parameters"]["XMoniteVersion"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilesResponse"];
                };
            };
            /** @description Internal Server Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
}
