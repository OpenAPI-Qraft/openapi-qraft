/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

import type { paths } from "../../openapi.d.ts";
import type { DeepReadonly, InvalidateQueryFilters, MutationFiltersByMutationKey, MutationFiltersByParameters, MutationVariables, OperationInfiniteData, PartialParameters, QueryFiltersByParameters, QueryFiltersByQueryKey, QueryFnOptionsByParameters, QueryFnOptionsByQueryKey, RequestFnResponse, ServiceOperationEnsureInfiniteQueryDataOptions, ServiceOperationEnsureQueryDataOptions, ServiceOperationFetchInfiniteQueryOptions, ServiceOperationFetchQueryOptions, ServiceOperationInfiniteQueryKey, ServiceOperationMutationFnOptions, ServiceOperationMutationKey, ServiceOperationQueryKey, ServiceOperationUseMutationOptions, UseQueryOptionsForUseQueries, UseQueryOptionsForUseSuspenseQuery, WithOptional, QraftServiceOperationsToken } from "@openapi-qraft/tanstack-query-react-types";
import type { CancelOptions, InfiniteQueryPageParamsOptions, InvalidateOptions, Mutation, MutationState, NoInfer, QueryState, RefetchOptions, ResetOptions, SetDataOptions, Updater } from "@tanstack/query-core";
import type { DefinedInitialDataInfiniteOptions, DefinedInitialDataOptions, DefinedUseInfiniteQueryResult, DefinedUseQueryResult, UndefinedInitialDataInfiniteOptions, UndefinedInitialDataOptions, UseInfiniteQueryResult, UseMutationResult, UseQueryResult, UseSuspenseInfiniteQueryOptions, UseSuspenseInfiniteQueryResult, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
export interface ApprovalPoliciesService {
    /**
     * @summary Get an approval policy by ID
     * @description Retrieve a specific approval policy.
     */
    getApprovalPoliciesId: {
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError> | QueryFiltersByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>, options?: CancelOptions): Promise<void>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        getQueryKey(parameters: DeepReadonly<GetApprovalPoliciesIdParameters>): ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.getApprovalPoliciesId.useQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         items_order: itemsOrder
         *     }
         * })
         * ```
         */
        useQuery<TData = GetApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>), options?: Omit<UndefinedInitialDataOptions<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError, TData, ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>>, "queryKey">): UseQueryResult<TData, GetApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.getApprovalPoliciesId.useQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         items_order: itemsOrder
         *     }
         * })
         * ```
         */
        useQuery<TData = GetApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>), options: Omit<DefinedInitialDataOptions<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError, TData, ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetApprovalPoliciesIdError | Error>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        fetchInfiniteQuery<TPageParam extends GetApprovalPoliciesIdParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters, DeepReadonly<TPageParam>, GetApprovalPoliciesIdError>): Promise<OperationInfiniteData<GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters>>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        prefetchInfiniteQuery<TPageParam extends GetApprovalPoliciesIdParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters, DeepReadonly<TPageParam>, GetApprovalPoliciesIdError>): Promise<void>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        ensureInfiniteQueryData<TPageParam extends GetApprovalPoliciesIdParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters, DeepReadonly<TPageParam>, GetApprovalPoliciesIdError>): Promise<OperationInfiniteData<GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters>>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>): Promise<GetApprovalPoliciesIdData>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>): Promise<void>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>): Promise<GetApprovalPoliciesIdData>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>)): OperationInfiniteData<GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters> | undefined;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError> | QueryFiltersByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>,
            data: NoInfer<OperationInfiniteData<GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>,
            data: GetApprovalPoliciesIdData | undefined
        ]>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        getQueryData(parameters: ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>)): GetApprovalPoliciesIdData | undefined;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        getQueryState(parameters: ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>)): QueryState<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError> | undefined;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        getInfiniteQueryState(parameters: DeepReadonly<GetApprovalPoliciesIdParameters> | ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>): QueryState<OperationInfiniteData<GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters>, GetApprovalPoliciesIdError> | undefined;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>, options?: InvalidateOptions): Promise<void>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError> | QueryFiltersByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>): number;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetApprovalPoliciesIdParameters, TMeta, TSignal>), client?: (schema: GetApprovalPoliciesIdSchema, options: {
            parameters: GetApprovalPoliciesIdParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError>>): Promise<RequestFnResponse<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError>>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError> | QueryFiltersByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>, options?: RefetchOptions): Promise<void>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError> | QueryFiltersByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>): void;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError> | QueryFiltersByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>, options?: ResetOptions): Promise<void>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        setInfiniteQueryData(parameters: (DeepReadonly<GetApprovalPoliciesIdParameters>) | ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters>> | undefined, NoInfer<DeepReadonly<OperationInfiniteData<GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters>>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetApprovalPoliciesIdData, GetApprovalPoliciesIdParameters> | undefined;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError> | QueryFiltersByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>, updater: Updater<NoInfer<GetApprovalPoliciesIdData> | undefined, NoInfer<GetApprovalPoliciesIdData> | undefined>, options?: SetDataOptions): Array<GetApprovalPoliciesIdData | undefined>;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        setQueryData(parameters: (DeepReadonly<GetApprovalPoliciesIdParameters>) | ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>, updater: Updater<NoInfer<GetApprovalPoliciesIdData> | undefined, NoInfer<DeepReadonly<GetApprovalPoliciesIdData>> | undefined>, options?: SetDataOptions): GetApprovalPoliciesIdData | undefined;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        getInfiniteQueryKey(parameters: DeepReadonly<GetApprovalPoliciesIdParameters>): ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.getApprovalPoliciesId.useInfiniteQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             items_order: initialItemsOrder
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetApprovalPoliciesIdParameters, TQueryFnData = GetApprovalPoliciesIdData, TData = OperationInfiniteData<TQueryFnData, GetApprovalPoliciesIdParameters>>(parameters: ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>), options: Omit<UndefinedInitialDataInfiniteOptions<TQueryFnData, GetApprovalPoliciesIdError, TData, ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<TQueryFnData, PartialParameters<DeepReadonly<TPageParam>>>): UseInfiniteQueryResult<TData, GetApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.getApprovalPoliciesId.useInfiniteQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             items_order: initialItemsOrder
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetApprovalPoliciesIdParameters, TQueryFnData = GetApprovalPoliciesIdData, TData = OperationInfiniteData<TQueryFnData, GetApprovalPoliciesIdParameters>>(parameters: ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>), options: Omit<DefinedInitialDataInfiniteOptions<TQueryFnData, GetApprovalPoliciesIdError, TData, ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetApprovalPoliciesIdData, PartialParameters<DeepReadonly<TPageParam>>>): DefinedUseInfiniteQueryResult<TData, GetApprovalPoliciesIdError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getApprovalPoliciesIdTotal = qraft.approvalPoliciesService.getApprovalPoliciesId.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const getApprovalPoliciesIdByParametersTotal = qraft.approvalPoliciesService.getApprovalPoliciesId.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         header: {
         *             "x-monite-version": "2023-06-04",
         *             "x-monite-entity-id": xMoniteEntityId
         *         },
         *         path: {
         *             approval_policy_id: approvalPolicyId
         *         },
         *         query: {
         *             items_order: itemsOrder
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError> | QueryFiltersByQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdData, TInfinite, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getApprovalPoliciesIdResults = qraft.approvalPoliciesService.getApprovalPoliciesId.useQueries({
         *     queries: [
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 items_order: itemsOrder1
         *             }
         *         },
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 items_order: itemsOrder2
         *             }
         *         }
         *     ]
         * });
         * getApprovalPoliciesIdResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getApprovalPoliciesIdCombinedResults = qraft.approvalPoliciesService.getApprovalPoliciesId.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 items_order: itemsOrder1
         *             }
         *         },
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 items_order: itemsOrder2
         *             }
         *         }
         *     ]
         * });
         * getApprovalPoliciesIdCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdData, GetApprovalPoliciesIdError>>, TCombinedResult = Array<UseQueryResult<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError>>) => TCombinedResult;
        }): TCombinedResult;
        /**
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        getQueryKey(parameters: DeepReadonly<GetApprovalPoliciesIdParameters>): ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.getApprovalPoliciesId.useQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         items_order: itemsOrder
         *     }
         * })
         * ```
         */
        useQuery<TData = GetApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>), options?: Omit<UndefinedInitialDataOptions<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError, TData, ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>>, "queryKey">): UseQueryResult<TData, GetApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.getApprovalPoliciesId.useQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         items_order: itemsOrder
         *     }
         * })
         * ```
         */
        useQuery<TData = GetApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>), options: Omit<DefinedInitialDataOptions<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError, TData, ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.getApprovalPoliciesId.useSuspenseInfiniteQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             items_order: initialItemsOrder
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetApprovalPoliciesIdParameters, TData = GetApprovalPoliciesIdData>(parameters: ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>), options: Omit<UseSuspenseInfiniteQueryOptions<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError, OperationInfiniteData<TData, GetApprovalPoliciesIdParameters>, GetApprovalPoliciesIdData, ServiceOperationInfiniteQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetApprovalPoliciesIdData, PartialParameters<DeepReadonly<TPageParam>>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetApprovalPoliciesIdParameters>, GetApprovalPoliciesIdError | Error>;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently with Suspense support.
         * Similar to useQueries but integrates with React Suspense for loading states.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQueries|`useSuspenseQueries(...)` documentation}
         * @example Basic usage with Suspense
         * ```ts
         * const getApprovalPoliciesIdData = qraft.approvalPoliciesService.getApprovalPoliciesId.useSuspenseQueries({
         *     queries: [
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 items_order: itemsOrder1
         *             }
         *         },
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 items_order: itemsOrder2
         *             }
         *         }
         *     ]
         * });
         * getApprovalPoliciesIdResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example With data transformation using combine
         * ```ts
         * const getApprovalPoliciesIdCombinedData = qraft.approvalPoliciesService.getApprovalPoliciesId.useSuspenseQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 items_order: itemsOrder1
         *             }
         *         },
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 items_order: itemsOrder2
         *             }
         *         }
         *     ]
         * });
         * getApprovalPoliciesIdCombinedData.forEach(data => console.log({ data }));
         * ```
         */
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters, GetApprovalPoliciesIdData, GetApprovalPoliciesIdError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**
         * Performs asynchronous data fetching with Suspense support.
         * Similar to useQuery but integrates with React Suspense for loading states.
         *
         * @summary Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQuery|`useSuspenseQuery(...)` documentation}
         * @example Suspense Query with parameters
         * ```ts
         * const data = qraft.approvalPoliciesService.getApprovalPoliciesId.useSuspenseQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         items_order: itemsOrder
         *     }
         * })
         * ```
         */
        useSuspenseQuery<TData = GetApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters> | (DeepReadonly<GetApprovalPoliciesIdParameters>), options?: Omit<UseSuspenseQueryOptions<GetApprovalPoliciesIdData, GetApprovalPoliciesIdError, TData, ServiceOperationQueryKey<GetApprovalPoliciesIdSchema, GetApprovalPoliciesIdParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetApprovalPoliciesIdError | Error>;
        schema: GetApprovalPoliciesIdSchema;
        types: {
            parameters: GetApprovalPoliciesIdParameters;
            data: GetApprovalPoliciesIdData;
            error: GetApprovalPoliciesIdError;
        };
    };
    /**
     * @summary Delete an approval policy
     * @description Delete an existing approval policy.
     */
    deleteApprovalPoliciesId: {
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError> | QueryFiltersByQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>, options?: CancelOptions): Promise<void>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getQueryKey(parameters: DeepReadonly<DeleteApprovalPoliciesIdParameters>): ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useQuery<TData = DeleteApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>), options?: Omit<UndefinedInitialDataOptions<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError, TData, ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>>, "queryKey">): UseQueryResult<TData, DeleteApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useQuery<TData = DeleteApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>), options: Omit<DefinedInitialDataOptions<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError, TData, ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>>, "queryKey">): DefinedUseQueryResult<TData, DeleteApprovalPoliciesIdError | Error>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        fetchInfiniteQuery<TPageParam extends DeleteApprovalPoliciesIdParameters>(options: ServiceOperationFetchInfiniteQueryOptions<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeepReadonly<TPageParam>, DeleteApprovalPoliciesIdError>): Promise<OperationInfiniteData<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters>>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        prefetchInfiniteQuery<TPageParam extends DeleteApprovalPoliciesIdParameters>(options: ServiceOperationFetchInfiniteQueryOptions<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeepReadonly<TPageParam>, DeleteApprovalPoliciesIdError>): Promise<void>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        ensureInfiniteQueryData<TPageParam extends DeleteApprovalPoliciesIdParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeepReadonly<TPageParam>, DeleteApprovalPoliciesIdError>): Promise<OperationInfiniteData<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters>>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        fetchQuery(options: ServiceOperationFetchQueryOptions<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>): Promise<DeleteApprovalPoliciesIdData>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        prefetchQuery(options: ServiceOperationFetchQueryOptions<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>): Promise<void>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>): Promise<DeleteApprovalPoliciesIdData>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>)): OperationInfiniteData<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters> | undefined;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError> | QueryFiltersByQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>,
            data: NoInfer<OperationInfiniteData<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>,
            data: DeleteApprovalPoliciesIdData | undefined
        ]>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getQueryData(parameters: ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>)): DeleteApprovalPoliciesIdData | undefined;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getQueryState(parameters: ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>)): QueryState<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError> | undefined;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getInfiniteQueryState(parameters: DeepReadonly<DeleteApprovalPoliciesIdParameters> | ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>): QueryState<OperationInfiniteData<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters>, DeleteApprovalPoliciesIdError> | undefined;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>, options?: InvalidateOptions): Promise<void>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError> | QueryFiltersByQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>): number;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError> | QueryFiltersByQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>, options?: RefetchOptions): Promise<void>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError> | QueryFiltersByQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>): void;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError> | QueryFiltersByQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>, options?: ResetOptions): Promise<void>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        setInfiniteQueryData(parameters: (DeepReadonly<DeleteApprovalPoliciesIdParameters>) | ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>, updater: Updater<NoInfer<OperationInfiniteData<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters>> | undefined, NoInfer<DeepReadonly<OperationInfiniteData<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters>>> | undefined>, options?: SetDataOptions): OperationInfiniteData<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters> | undefined;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError> | QueryFiltersByQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>, updater: Updater<NoInfer<DeleteApprovalPoliciesIdData> | undefined, NoInfer<DeleteApprovalPoliciesIdData> | undefined>, options?: SetDataOptions): Array<DeleteApprovalPoliciesIdData | undefined>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        setQueryData(parameters: (DeepReadonly<DeleteApprovalPoliciesIdParameters>) | ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>, updater: Updater<NoInfer<DeleteApprovalPoliciesIdData> | undefined, NoInfer<DeepReadonly<DeleteApprovalPoliciesIdData>> | undefined>, options?: SetDataOptions): DeleteApprovalPoliciesIdData | undefined;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getInfiniteQueryKey(parameters: DeepReadonly<DeleteApprovalPoliciesIdParameters>): ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useInfiniteQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             limit: initialLimit
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends DeleteApprovalPoliciesIdParameters, TQueryFnData = DeleteApprovalPoliciesIdData, TData = OperationInfiniteData<TQueryFnData, DeleteApprovalPoliciesIdParameters>>(parameters: ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>), options: Omit<UndefinedInitialDataInfiniteOptions<TQueryFnData, DeleteApprovalPoliciesIdError, TData, ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<TQueryFnData, PartialParameters<DeepReadonly<TPageParam>>>): UseInfiniteQueryResult<TData, DeleteApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useInfiniteQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             limit: initialLimit
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends DeleteApprovalPoliciesIdParameters, TQueryFnData = DeleteApprovalPoliciesIdData, TData = OperationInfiniteData<TQueryFnData, DeleteApprovalPoliciesIdParameters>>(parameters: ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>), options: Omit<DefinedInitialDataInfiniteOptions<TQueryFnData, DeleteApprovalPoliciesIdError, TData, ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<DeleteApprovalPoliciesIdData, PartialParameters<DeepReadonly<TPageParam>>>): DefinedUseInfiniteQueryResult<TData, DeleteApprovalPoliciesIdError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const deleteApprovalPoliciesIdTotal = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const deleteApprovalPoliciesIdByParametersTotal = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         header: {
         *             "x-monite-version": "2023-06-04",
         *             "x-monite-entity-id": xMoniteEntityId
         *         },
         *         path: {
         *             approval_policy_id: approvalPolicyId
         *         },
         *         query: {
         *             limit: limit
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError> | QueryFiltersByQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, TInfinite, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const deleteApprovalPoliciesIdResults = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useQueries({
         *     queries: [
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 limit: limit1
         *             }
         *         },
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 limit: limit2
         *             }
         *         }
         *     ]
         * });
         * deleteApprovalPoliciesIdResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const deleteApprovalPoliciesIdCombinedResults = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 limit: limit1
         *             }
         *         },
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 limit: limit2
         *             }
         *         }
         *     ]
         * });
         * deleteApprovalPoliciesIdCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError>>, TCombinedResult = Array<UseQueryResult<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError>>) => TCombinedResult;
        }): TCombinedResult;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getQueryKey(parameters: DeepReadonly<DeleteApprovalPoliciesIdParameters>): ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useQuery<TData = DeleteApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>), options?: Omit<UndefinedInitialDataOptions<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError, TData, ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>>, "queryKey">): UseQueryResult<TData, DeleteApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useQuery<TData = DeleteApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>), options: Omit<DefinedInitialDataOptions<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError, TData, ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>>, "queryKey">): DefinedUseQueryResult<TData, DeleteApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useSuspenseInfiniteQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             limit: initialLimit
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends DeleteApprovalPoliciesIdParameters, TData = DeleteApprovalPoliciesIdData>(parameters: ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>), options: Omit<UseSuspenseInfiniteQueryOptions<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError, OperationInfiniteData<TData, DeleteApprovalPoliciesIdParameters>, DeleteApprovalPoliciesIdData, ServiceOperationInfiniteQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<DeleteApprovalPoliciesIdData, PartialParameters<DeepReadonly<TPageParam>>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, DeleteApprovalPoliciesIdParameters>, DeleteApprovalPoliciesIdError | Error>;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently with Suspense support.
         * Similar to useQueries but integrates with React Suspense for loading states.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQueries|`useSuspenseQueries(...)` documentation}
         * @example Basic usage with Suspense
         * ```ts
         * const deleteApprovalPoliciesIdData = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useSuspenseQueries({
         *     queries: [
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 limit: limit1
         *             }
         *         },
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 limit: limit2
         *             }
         *         }
         *     ]
         * });
         * deleteApprovalPoliciesIdResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example With data transformation using combine
         * ```ts
         * const deleteApprovalPoliciesIdCombinedData = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useSuspenseQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 limit: limit1
         *             }
         *         },
         *         {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 limit: limit2
         *             }
         *         }
         *     ]
         * });
         * deleteApprovalPoliciesIdCombinedData.forEach(data => console.log({ data }));
         * ```
         */
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError>>, TCombinedResult = Array<UseSuspenseQueryResult<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**
         * Performs asynchronous data fetching with Suspense support.
         * Similar to useQuery but integrates with React Suspense for loading states.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQuery|`useSuspenseQuery(...)` documentation}
         * @example Suspense Query with parameters
         * ```ts
         * const data = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useSuspenseQuery({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useSuspenseQuery<TData = DeleteApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters> | (DeepReadonly<DeleteApprovalPoliciesIdParameters>), options?: Omit<UseSuspenseQueryOptions<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError, TData, ServiceOperationQueryKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>>, "queryKey">): UseSuspenseQueryResult<TData, DeleteApprovalPoliciesIdError | Error>;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        getMutationKey(parameters: DeepReadonly<DeleteApprovalPoliciesIdParameters> | void): ServiceOperationMutationKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useMutation({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useMutation()
         * mutate({
         *     body: bodyPayload,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * });
         * ```
         */
        useMutation<TVariables extends DeleteApprovalPoliciesIdBody, TContext = unknown>(parameters: DeepReadonly<DeleteApprovalPoliciesIdParameters>, options?: ServiceOperationUseMutationOptions<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, TVariables, DeleteApprovalPoliciesIdError | Error, TContext>): UseMutationResult<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError | Error, TVariables | void, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useMutation({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useMutation()
         * mutate({
         *     body: bodyPayload,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, TVariables, DeleteApprovalPoliciesIdError | Error, TContext>): UseMutationResult<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const deleteApprovalPoliciesIdTotal = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const deleteApprovalPoliciesIdTotal = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useIsMutating({
         *     parameters: {
         *         header: {
         *             "x-monite-version": "2023-06-04",
         *             "x-monite-entity-id": xMoniteEntityId
         *         },
         *         path: {
         *             approval_policy_id: approvalPolicyId
         *         },
         *         query: {
         *             limit: limit
         *         }
         *     }
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError | Error, TContext> | MutationFiltersByMutationKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError | Error, TContext>): number;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        isMutating<TContext>(filters?: MutationFiltersByParameters<DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError | Error, TContext> | MutationFiltersByMutationKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError | Error, TContext>): number;
        /**
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         */
        (options: ServiceOperationMutationFnOptions<DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdParameters>, client?: (schema: DeleteApprovalPoliciesIdSchema, options: ServiceOperationMutationFnOptions<DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdParameters>) => Promise<RequestFnResponse<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError>>): Promise<RequestFnResponse<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @summary Delete an approval policy
         * @description Delete an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const deleteApprovalPoliciesIdPendingMutationVariables = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const deleteApprovalPoliciesIdMutationData = qraft.approvalPoliciesService.deleteApprovalPoliciesId.useMutationState({
         *     filters: {
         *         parameters: {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId
         *             },
         *             query: {
         *                 limit: limit
         *             }
         *         }
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError | Error, MutationVariables<DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError | Error, TContext> | MutationFiltersByMutationKey<DeleteApprovalPoliciesIdSchema, DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdParameters, DeleteApprovalPoliciesIdError | Error, TContext>;
            select?: (mutation: Mutation<DeleteApprovalPoliciesIdData, DeleteApprovalPoliciesIdError | Error, MutationVariables<DeleteApprovalPoliciesIdBody, DeleteApprovalPoliciesIdParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: DeleteApprovalPoliciesIdSchema;
        types: {
            parameters: DeleteApprovalPoliciesIdParameters;
            data: DeleteApprovalPoliciesIdData;
            error: DeleteApprovalPoliciesIdError;
            body: DeleteApprovalPoliciesIdBody;
        };
    };
    /**
     * @summary Update an approval policy
     * @description Update an existing approval policy.
     */
    patchApprovalPoliciesId: {
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError> | QueryFiltersByQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>, options?: CancelOptions): Promise<void>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getQueryKey(parameters: DeepReadonly<PatchApprovalPoliciesIdQueryParameters>): ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useQuery({
         *     body: queryBody,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useQuery<TData = PatchApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>), options?: Omit<UndefinedInitialDataOptions<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError, TData, ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>>, "queryKey">): UseQueryResult<TData, PatchApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useQuery({
         *     body: queryBody,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useQuery<TData = PatchApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>), options: Omit<DefinedInitialDataOptions<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError, TData, ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>>, "queryKey">): DefinedUseQueryResult<TData, PatchApprovalPoliciesIdError | Error>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        fetchInfiniteQuery<TPageParam extends PatchApprovalPoliciesIdQueryParameters>(options: ServiceOperationFetchInfiniteQueryOptions<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters, DeepReadonly<TPageParam>, PatchApprovalPoliciesIdError>): Promise<OperationInfiniteData<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters>>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        prefetchInfiniteQuery<TPageParam extends PatchApprovalPoliciesIdQueryParameters>(options: ServiceOperationFetchInfiniteQueryOptions<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters, DeepReadonly<TPageParam>, PatchApprovalPoliciesIdError>): Promise<void>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        ensureInfiniteQueryData<TPageParam extends PatchApprovalPoliciesIdQueryParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters, DeepReadonly<TPageParam>, PatchApprovalPoliciesIdError>): Promise<OperationInfiniteData<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters>>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        fetchQuery(options: ServiceOperationFetchQueryOptions<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>): Promise<PatchApprovalPoliciesIdData>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        prefetchQuery(options: ServiceOperationFetchQueryOptions<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>): Promise<void>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>): Promise<PatchApprovalPoliciesIdData>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>)): OperationInfiniteData<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters> | undefined;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError> | QueryFiltersByQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>,
            data: NoInfer<OperationInfiniteData<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>,
            data: PatchApprovalPoliciesIdData | undefined
        ]>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getQueryData(parameters: ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>)): PatchApprovalPoliciesIdData | undefined;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getQueryState(parameters: ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>)): QueryState<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError> | undefined;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getInfiniteQueryState(parameters: DeepReadonly<PatchApprovalPoliciesIdQueryParameters> | ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>): QueryState<OperationInfiniteData<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters>, PatchApprovalPoliciesIdError> | undefined;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>, options?: InvalidateOptions): Promise<void>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError> | QueryFiltersByQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>): number;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError> | QueryFiltersByQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>, options?: RefetchOptions): Promise<void>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError> | QueryFiltersByQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>): void;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError> | QueryFiltersByQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>, options?: ResetOptions): Promise<void>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        setInfiniteQueryData(parameters: (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>) | ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>, updater: Updater<NoInfer<OperationInfiniteData<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters>> | undefined, NoInfer<DeepReadonly<OperationInfiniteData<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters>>> | undefined>, options?: SetDataOptions): OperationInfiniteData<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdQueryParameters> | undefined;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError> | QueryFiltersByQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>, updater: Updater<NoInfer<PatchApprovalPoliciesIdData> | undefined, NoInfer<PatchApprovalPoliciesIdData> | undefined>, options?: SetDataOptions): Array<PatchApprovalPoliciesIdData | undefined>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        setQueryData(parameters: (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>) | ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>, updater: Updater<NoInfer<PatchApprovalPoliciesIdData> | undefined, NoInfer<DeepReadonly<PatchApprovalPoliciesIdData>> | undefined>, options?: SetDataOptions): PatchApprovalPoliciesIdData | undefined;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getInfiniteQueryKey(parameters: DeepReadonly<PatchApprovalPoliciesIdQueryParameters>): ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useInfiniteQuery({
         *     body: queryBody,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             limit: initialLimit
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends PatchApprovalPoliciesIdQueryParameters, TQueryFnData = PatchApprovalPoliciesIdData, TData = OperationInfiniteData<TQueryFnData, PatchApprovalPoliciesIdQueryParameters>>(parameters: ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>), options: Omit<UndefinedInitialDataInfiniteOptions<TQueryFnData, PatchApprovalPoliciesIdError, TData, ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<TQueryFnData, PartialParameters<DeepReadonly<TPageParam>>>): UseInfiniteQueryResult<TData, PatchApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useInfiniteQuery({
         *     body: queryBody,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             limit: initialLimit
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends PatchApprovalPoliciesIdQueryParameters, TQueryFnData = PatchApprovalPoliciesIdData, TData = OperationInfiniteData<TQueryFnData, PatchApprovalPoliciesIdQueryParameters>>(parameters: ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>), options: Omit<DefinedInitialDataInfiniteOptions<TQueryFnData, PatchApprovalPoliciesIdError, TData, ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<PatchApprovalPoliciesIdData, PartialParameters<DeepReadonly<TPageParam>>>): DefinedUseInfiniteQueryResult<TData, PatchApprovalPoliciesIdError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const patchApprovalPoliciesIdTotal = qraft.approvalPoliciesService.patchApprovalPoliciesId.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const patchApprovalPoliciesIdByParametersTotal = qraft.approvalPoliciesService.patchApprovalPoliciesId.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         body: queryBody,
         *         header: {
         *             "x-monite-version": "2023-06-04",
         *             "x-monite-entity-id": xMoniteEntityId
         *         },
         *         path: {
         *             approval_policy_id: approvalPolicyId
         *         },
         *         query: {
         *             limit: limit
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError> | QueryFiltersByQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, TInfinite, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const patchApprovalPoliciesIdResults = qraft.approvalPoliciesService.patchApprovalPoliciesId.useQueries({
         *     queries: [
         *         {
         *             body: queryBody1,
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 limit: limit1
         *             }
         *         },
         *         {
         *             body: queryBody2,
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 limit: limit2
         *             }
         *         }
         *     ]
         * });
         * patchApprovalPoliciesIdResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const patchApprovalPoliciesIdCombinedResults = qraft.approvalPoliciesService.patchApprovalPoliciesId.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             body: queryBody1,
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 limit: limit1
         *             }
         *         },
         *         {
         *             body: queryBody2,
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 limit: limit2
         *             }
         *         }
         *     ]
         * });
         * patchApprovalPoliciesIdCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError>>, TCombinedResult = Array<UseQueryResult<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError>>) => TCombinedResult;
        }): TCombinedResult;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getQueryKey(parameters: DeepReadonly<PatchApprovalPoliciesIdQueryParameters>): ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useQuery({
         *     body: queryBody,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useQuery<TData = PatchApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>), options?: Omit<UndefinedInitialDataOptions<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError, TData, ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>>, "queryKey">): UseQueryResult<TData, PatchApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useQuery({
         *     body: queryBody,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useQuery<TData = PatchApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>), options: Omit<DefinedInitialDataOptions<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError, TData, ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>>, "queryKey">): DefinedUseQueryResult<TData, PatchApprovalPoliciesIdError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useSuspenseInfiniteQuery({
         *     body: queryBody,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     }
         * }, {
         *     initialPageParam: {
         *         query: {
         *             limit: initialLimit
         *         }
         *     },
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends PatchApprovalPoliciesIdQueryParameters, TData = PatchApprovalPoliciesIdData>(parameters: ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>), options: Omit<UseSuspenseInfiniteQueryOptions<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError, OperationInfiniteData<TData, PatchApprovalPoliciesIdQueryParameters>, PatchApprovalPoliciesIdData, ServiceOperationInfiniteQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>, PartialParameters<DeepReadonly<TPageParam>>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<PatchApprovalPoliciesIdData, PartialParameters<DeepReadonly<TPageParam>>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, PatchApprovalPoliciesIdQueryParameters>, PatchApprovalPoliciesIdError | Error>;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently with Suspense support.
         * Similar to useQueries but integrates with React Suspense for loading states.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQueries|`useSuspenseQueries(...)` documentation}
         * @example Basic usage with Suspense
         * ```ts
         * const patchApprovalPoliciesIdData = qraft.approvalPoliciesService.patchApprovalPoliciesId.useSuspenseQueries({
         *     queries: [
         *         {
         *             body: queryBody1,
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 limit: limit1
         *             }
         *         },
         *         {
         *             body: queryBody2,
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 limit: limit2
         *             }
         *         }
         *     ]
         * });
         * patchApprovalPoliciesIdResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example With data transformation using combine
         * ```ts
         * const patchApprovalPoliciesIdCombinedData = qraft.approvalPoliciesService.patchApprovalPoliciesId.useSuspenseQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             body: queryBody1,
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId1
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId1
         *             },
         *             query: {
         *                 limit: limit1
         *             }
         *         },
         *         {
         *             body: queryBody2,
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId2
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId2
         *             },
         *             query: {
         *                 limit: limit2
         *             }
         *         }
         *     ]
         * });
         * patchApprovalPoliciesIdCombinedData.forEach(data => console.log({ data }));
         * ```
         */
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError>>, TCombinedResult = Array<UseSuspenseQueryResult<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**
         * Performs asynchronous data fetching with Suspense support.
         * Similar to useQuery but integrates with React Suspense for loading states.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseQuery|`useSuspenseQuery(...)` documentation}
         * @example Suspense Query with parameters
         * ```ts
         * const data = qraft.approvalPoliciesService.patchApprovalPoliciesId.useSuspenseQuery({
         *     body: queryBody,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * ```
         */
        useSuspenseQuery<TData = PatchApprovalPoliciesIdData>(parameters: ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters> | (DeepReadonly<PatchApprovalPoliciesIdQueryParameters>), options?: Omit<UseSuspenseQueryOptions<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError, TData, ServiceOperationQueryKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdQueryParameters>>, "queryKey">): UseSuspenseQueryResult<TData, PatchApprovalPoliciesIdError | Error>;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        getMutationKey(parameters: DeepReadonly<PatchApprovalPoliciesIdMutationParameters> | void): ServiceOperationMutationKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdMutationParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useMutation({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useMutation()
         * mutate({
         *     body: bodyPayload,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * });
         * ```
         */
        useMutation<TVariables extends PatchApprovalPoliciesIdBody, TContext = unknown>(parameters: DeepReadonly<PatchApprovalPoliciesIdMutationParameters>, options?: ServiceOperationUseMutationOptions<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdMutationParameters, TVariables, PatchApprovalPoliciesIdError | Error, TContext>): UseMutationResult<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError | Error, TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useMutation({
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * })
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.approvalPoliciesService.patchApprovalPoliciesId.useMutation()
         * mutate({
         *     body: bodyPayload,
         *     header: {
         *         "x-monite-version": "2023-06-04",
         *         "x-monite-entity-id": xMoniteEntityId
         *     },
         *     path: {
         *         approval_policy_id: approvalPolicyId
         *     },
         *     query: {
         *         limit: limit
         *     }
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdMutationParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdMutationParameters, TVariables, PatchApprovalPoliciesIdError | Error, TContext>): UseMutationResult<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const patchApprovalPoliciesIdTotal = qraft.approvalPoliciesService.patchApprovalPoliciesId.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const patchApprovalPoliciesIdTotal = qraft.approvalPoliciesService.patchApprovalPoliciesId.useIsMutating({
         *     parameters: {
         *         header: {
         *             "x-monite-version": "2023-06-04",
         *             "x-monite-entity-id": xMoniteEntityId
         *         },
         *         path: {
         *             approval_policy_id: approvalPolicyId
         *         },
         *         query: {
         *             limit: limit
         *         }
         *     }
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdMutationParameters, PatchApprovalPoliciesIdError | Error, TContext> | MutationFiltersByMutationKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdMutationParameters, PatchApprovalPoliciesIdError | Error, TContext>): number;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        isMutating<TContext>(filters?: MutationFiltersByParameters<PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdMutationParameters, PatchApprovalPoliciesIdError | Error, TContext> | MutationFiltersByMutationKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdMutationParameters, PatchApprovalPoliciesIdError | Error, TContext>): number;
        /**
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         */
        (options: ServiceOperationMutationFnOptions<PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdMutationParameters>, client?: (schema: PatchApprovalPoliciesIdSchema, options: ServiceOperationMutationFnOptions<PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdMutationParameters>) => Promise<RequestFnResponse<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError>>): Promise<RequestFnResponse<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @summary Update an approval policy
         * @description Update an existing approval policy.
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const patchApprovalPoliciesIdPendingMutationVariables = qraft.approvalPoliciesService.patchApprovalPoliciesId.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const patchApprovalPoliciesIdMutationData = qraft.approvalPoliciesService.patchApprovalPoliciesId.useMutationState({
         *     filters: {
         *         parameters: {
         *             header: {
         *                 "x-monite-version": "2023-06-04",
         *                 "x-monite-entity-id": xMoniteEntityId
         *             },
         *             path: {
         *                 approval_policy_id: approvalPolicyId
         *             },
         *             query: {
         *                 limit: limit
         *             }
         *         }
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError | Error, MutationVariables<PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdMutationParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdMutationParameters, PatchApprovalPoliciesIdError | Error, TContext> | MutationFiltersByMutationKey<PatchApprovalPoliciesIdSchema, PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdMutationParameters, PatchApprovalPoliciesIdError | Error, TContext>;
            select?: (mutation: Mutation<PatchApprovalPoliciesIdData, PatchApprovalPoliciesIdError | Error, MutationVariables<PatchApprovalPoliciesIdBody, PatchApprovalPoliciesIdMutationParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: PatchApprovalPoliciesIdSchema;
        types: {
            parameters: PatchApprovalPoliciesIdMutationParameters;
            data: PatchApprovalPoliciesIdData;
            error: PatchApprovalPoliciesIdError;
            body: PatchApprovalPoliciesIdBody;
        };
    };
}
/**
 * @summary Get an approval policy by ID
 * @description Retrieve a specific approval policy.
 */
export const getApprovalPoliciesId = {
    schema: {
        method: "get",
        url: "/approval_policies/{approval_policy_id}",
        security: ["partnerToken"]
    }
} as {
    schema: GetApprovalPoliciesIdSchema;
    [QraftServiceOperationsToken]: ApprovalPoliciesService["getApprovalPoliciesId"];
};
/**
 * @summary Delete an approval policy
 * @description Delete an existing approval policy.
 */
export const deleteApprovalPoliciesId = {
    schema: {
        method: "delete",
        url: "/approval_policies/{approval_policy_id}",
        security: ["HTTPBearer"]
    }
} as {
    schema: DeleteApprovalPoliciesIdSchema;
    [QraftServiceOperationsToken]: ApprovalPoliciesService["deleteApprovalPoliciesId"];
};
/**
 * @summary Update an approval policy
 * @description Update an existing approval policy.
 */
export const patchApprovalPoliciesId = {
    schema: {
        method: "patch",
        url: "/approval_policies/{approval_policy_id}",
        mediaType: ["application/json"],
        security: ["HTTPBearer"]
    }
} as {
    schema: PatchApprovalPoliciesIdSchema;
    [QraftServiceOperationsToken]: ApprovalPoliciesService["patchApprovalPoliciesId"];
};
export const approvalPoliciesService = {
    getApprovalPoliciesId,
    deleteApprovalPoliciesId,
    patchApprovalPoliciesId
} as const;
type GetApprovalPoliciesIdSchema = {
    method: "get";
    url: "/approval_policies/{approval_policy_id}";
    security: [
        "partnerToken"
    ];
};
type GetApprovalPoliciesIdParameters = paths["/approval_policies/{approval_policy_id}"]["get"]["parameters"];
type GetApprovalPoliciesIdData = paths["/approval_policies/{approval_policy_id}"]["get"]["responses"]["200"]["content"]["application/json"];
type GetApprovalPoliciesIdError = paths["/approval_policies/{approval_policy_id}"]["get"]["responses"]["401"]["content"]["application/json"] | paths["/approval_policies/{approval_policy_id}"]["get"]["responses"]["422"]["content"]["application/json"] | paths["/approval_policies/{approval_policy_id}"]["get"]["responses"]["default"]["content"]["application/json"];
type DeleteApprovalPoliciesIdSchema = {
    method: "delete";
    url: "/approval_policies/{approval_policy_id}";
    security: [
        "HTTPBearer"
    ];
};
type DeleteApprovalPoliciesIdParameters = paths["/approval_policies/{approval_policy_id}"]["delete"]["parameters"];
type DeleteApprovalPoliciesIdData = paths["/approval_policies/{approval_policy_id}"]["delete"]["responses"]["200"]["content"]["application/json"];
type DeleteApprovalPoliciesIdError = paths["/approval_policies/{approval_policy_id}"]["delete"]["responses"]["401"]["content"]["application/json"] | paths["/approval_policies/{approval_policy_id}"]["delete"]["responses"]["422"]["content"]["application/json"] | paths["/approval_policies/{approval_policy_id}"]["delete"]["responses"]["default"]["content"]["application/json"];
type DeleteApprovalPoliciesIdBody = undefined;
type PatchApprovalPoliciesIdSchema = {
    method: "patch";
    url: "/approval_policies/{approval_policy_id}";
    mediaType: [
        "application/json"
    ];
    security: [
        "HTTPBearer"
    ];
};
type PatchApprovalPoliciesIdQueryParameters = paths["/approval_policies/{approval_policy_id}"]["patch"]["parameters"] & {
    body: PatchApprovalPoliciesIdBody;
};
type PatchApprovalPoliciesIdMutationParameters = paths["/approval_policies/{approval_policy_id}"]["patch"]["parameters"];
type PatchApprovalPoliciesIdData = paths["/approval_policies/{approval_policy_id}"]["patch"]["responses"]["200"]["content"]["application/json"];
type PatchApprovalPoliciesIdError = paths["/approval_policies/{approval_policy_id}"]["patch"]["responses"]["401"]["content"]["application/json"] | paths["/approval_policies/{approval_policy_id}"]["patch"]["responses"]["422"]["content"]["application/json"] | paths["/approval_policies/{approval_policy_id}"]["patch"]["responses"]["default"]["content"]["application/json"];
type PatchApprovalPoliciesIdBody = paths["/approval_policies/{approval_policy_id}"]["patch"]["requestBody"]["content"]["application/json"];
