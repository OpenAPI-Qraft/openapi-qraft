#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { generateSourceFileFactoryCode } from '@openapi-qraft/ts-factory-code-generator';
import camelcase from 'camelcase';

const serviceOperationFiles = [
  'ServiceOperationCancelQueries.ts',
  'ServiceOperationFetchInfiniteQuery.ts',
  'ServiceOperationFetchQuery.ts',
  'ServiceOperationGetInfiniteQueryData.ts',
  'ServiceOperationGetQueriesData.ts',
  'ServiceOperationGetQueryData.ts',
  'ServiceOperationGetQueryState.ts',
  'ServiceOperationInvalidateQueries.ts',
  'ServiceOperationIsFetchingQueries.ts',
  'ServiceOperationIsMutatingQueries.ts',
  'ServiceOperationMutationFn.ts',
  'ServiceOperationQueryFn.ts',
  'ServiceOperationRefetchQueries.ts',
  'ServiceOperationRemoveQueries.ts',
  'ServiceOperationResetQueries.ts',
  'ServiceOperationSetInfiniteQueryData.ts',
  'ServiceOperationSetQueriesData.ts',
  'ServiceOperationSetQueryData.ts',
  'ServiceOperationUseInfiniteQuery.ts',
  'ServiceOperationUseIsFetchingQueries.ts',
  'ServiceOperationUseIsMutating.ts',
  'ServiceOperationUseMutation.ts',
  'ServiceOperationUseMutationState.ts',
  'ServiceOperationGetMutationCache.ts',
  'ServiceOperationUseQueries.ts',
  'ServiceOperationUseQuery.ts',
  'ServiceOperationUseSuspenseInfiniteQuery.ts',
  'ServiceOperationUseSuspenseQueries.ts',
  'ServiceOperationUseSuspenseQuery.ts',
];

async function main() {
  serviceOperationFiles.forEach((file) => {
    const sourceFileFactoryCode = generateSourceFileFactoryCode(
      path.join('../tanstack-query-react-types/src/service-operation', file)
    );

    const sourceFileBaseName = path.basename(file, path.extname(file));

    const fileCode = `
/** This file was auto-generated by "@openapi-qraft/tanstack-query-react-plugin" codegen script. */
import ts from "typescript";
const factory = ts.factory;
export const ${camelcase('create-' + sourceFileBaseName + '-nodes')} = () => ${sourceFileFactoryCode}
`;

    fs.writeFileSync(
      path.join('src', 'ts-factory', 'service-operation.generated', file),
      fileCode.trim() + '\n'
    );
  });
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
