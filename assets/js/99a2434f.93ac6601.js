"use strict";(self.webpackChunkopenapi_qraft_website=self.webpackChunkopenapi_qraft_website||[]).push([[45],{7441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=n(2540),i=n(3023);const r={sidebar_label:"useIsMutating"},a="useIsMutating(...)",o={id:"hooks/useIsMutating",title:"useIsMutating(...)",description:"The optional hook that returns the number of mutations that your",source:"@site/docs/hooks/useIsMutating.mdx",sourceDirName:"hooks",slug:"/hooks/useIsMutating",permalink:"/openapi-qraft/docs/hooks/useIsMutating",draft:!1,unlisted:!1,editUrl:"https://github.com/OpenAPI-Qraft/openapi-qraft/edit/main/website/docs/hooks/useIsMutating.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"useIsMutating"},sidebar:"mainDocsSidebar",previous:{title:"useIsFetching",permalink:"/openapi-qraft/docs/hooks/useIsFetching"},next:{title:"useMutationState",permalink:"/openapi-qraft/docs/hooks/useMutationState"}},l={},c=[{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3}];function u(e){const t={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"useismutating",children:"useIsMutating(...)"}),"\n",(0,s.jsxs)(t.p,{children:["The optional hook that returns the ",(0,s.jsx)(t.code,{children:"number"})," of mutations that your\napplication is mutating (useful for app-wide loading indicators).\nSee the TanStack ",(0,s.jsx)(t.a,{href:"https://tanstack.com/query/latest/docs/framework/react/reference/useIsMutating",children:(0,s.jsx)(t.em,{children:"useIsMutating(...) \ud83c\udf34"})}),"\ndocumentation for more details."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const mutationNumber = qraft.<service>.<operation>.useIsMutating(\n  filters,\n  queryClient,\n)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"filters?: UseMutationStateFiltersByParameters | UseMutationStateFiltersByMutationKey"}),",","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Optional"}),", represents the ",(0,s.jsx)(t.a,{href:"https://tanstack.com/query/latest/docs/framework/react/guides/filters#mutation-filters",children:(0,s.jsx)(t.em,{children:"Mutation Filters \ud83c\udf34"})}),"\nto be used, strictly-typed \u2728"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"filters.parameters: { path, query, header }"})," will be used for filtering mutations by parameters"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"filters.mutationKey: MutationKey"})," will be used for filtering mutations by ",(0,s.jsx)(t.em,{children:"MutationKey"})," instead of parameters","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"filters.mutationKey"})," and ",(0,s.jsx)(t.code,{children:"filters.parameters"})," are mutually exclusive"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"filters.predicate?: (mutation: Mutation) => boolean"})," will be used for filtering mutations by custom predicate"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"If not provided"}),", all mutations matching to ",(0,s.jsx)(t.code,{children:"<service>.<operation>"})," will be returned"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"queryClient?: QueryClient"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Optional"})," ",(0,s.jsx)(t.a,{href:"https://tanstack.com/query/latest/docs/reference/QueryClient",children:(0,s.jsx)(t.em,{children:"QueryClient \ud83c\udf34"})})," to be used"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"If not provided"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"QraftContext.queryClient"})," will be used if available"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://tanstack.com/query/latest/docs/framework/react/reference/useQueryClient",children:(0,s.jsx)(t.em,{children:"useQueryClient() \ud83c\udf34"})}),"\nresult will be used as a fallback"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"mutationsNumber"}),": The number of mutations that are matching the provided filters and are in the ",(0,s.jsx)(t.em,{children:"loading"})," state"]}),"\n",(0,s.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:'title="src/DocumentsUploadStatus.tsx"',children:"import { createAPIClient } from './api'; // generated by OpenAPI Qraft CLI\n\nconst qraft = createAPIClient();\n\nfunction DocumentsUploadStatus() {\n  const creatingDocument = qraft.entities.postEntitiesIdDocuments.useIsMutating({\n    path: {\n      entity_id: '1',\n    },\n  });\n\n  const creatingDocumentTotal = qraft.entities.postEntitiesIdDocuments.useIsMutating();\n\n  return (\n    <>\n      {!!creatingDocumentTotal && <div>Number of creating documents: {creatingDocumentTotal}...</div>}\n      {!!creatingDocument && <div>Creating document...</div>}\n    </>\n  );\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(3696);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);