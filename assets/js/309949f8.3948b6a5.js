"use strict";(self.webpackChunkopenapi_qraft_website=self.webpackChunkopenapi_qraft_website||[]).push([[3663],{4973:(e,n,r)=>{r.d(n,{A:()=>o});r(3696);var a=r(2689);const t={tabItem:"tabItem_wHwb"};var i=r(2540);function o(e){let{children:n,hidden:r,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(t.tabItem,o),hidden:r,children:n})}},8:(e,n,r)=>{r.d(n,{A:()=>I});var a=r(3696),t=r(2689),i=r(4778),o=r(9519),l=r(231),s=r(2239),c=r(5796),u=r(4152);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:r,attributes:a,default:t}}=e;return{value:n,label:r,attributes:a,default:t}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function h(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:r}=e;const t=(0,o.W6)(),i=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,s.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})}),[i,t])]}function m(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,i=p(e),[o,s]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[c,d]=f({queryString:r,groupId:t}),[m,g]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,i]=(0,u.Dv)(r);return[t,(0,a.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:t}),y=(()=>{const e=c??m;return h({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{y&&s(y)}),[y]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),g(e)}),[d,g,i]),tabValues:i}}var g=r(4613);const y={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var x=r(2540);function b(e){let{className:n,block:r,selectedValue:a,selectValue:o,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),u=e=>{const n=e.currentTarget,r=s.indexOf(n),t=l[r].value;t!==a&&(c(n),o(t))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;n=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;n=s[r]??s[s.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{s.push(e)},onKeyDown:d,onClick:u,...i,className:(0,t.A)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":a===n}),children:r??n},n)}))})}function j(e){let{lazy:n,children:r,selectedValue:i}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,t.A)("tabs-container",y.tabList),children:[(0,x.jsx)(b,{...n,...e}),(0,x.jsx)(j,{...n,...e})]})}function I(e){const n=(0,g.A)();return(0,x.jsx)(v,{...e,children:d(e.children)},String(n))}},8575:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"codegen/CLI/redocly-config","title":"Redocly Config Support","description":"Qraft CLI can use a Redocly configuration file (redocly.yaml)","source":"@site/docs/codegen/CLI/redocly-config.mdx","sourceDirName":"codegen/CLI","slug":"/codegen/CLI/redocly-config","permalink":"/openapi-qraft/docs/codegen/CLI/redocly-config","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenAPI-Qraft/openapi-qraft/edit/main/website/docs/codegen/CLI/redocly-config.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Redocly config support"},"sidebar":"mainDocsSidebar","previous":{"title":"CLI","permalink":"/openapi-qraft/docs/codegen/CLI/"},"next":{"title":"Predefined operation parameters","permalink":"/openapi-qraft/docs/codegen/CLI/create-predefined-parameters-request-fn"}}');var t=r(2540),i=r(3023),o=r(8),l=r(4973);const s={sidebar_position:2,sidebar_label:"Redocly config support"},c="Redocly Config Support",u={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration Example: Redocly \ud83e\udd1d Qraft",id:"configuration-example-redocly--qraft",level:3},{value:"Generating from Redocly Configuration",id:"generating-from-redocly-configuration",level:3},{value:"Generating Specific APIs",id:"generating-specific-apis",level:4},{value:"Authentication Configuration",id:"authentication-configuration",level:3},{value:"Extended Configuration Example",id:"extended-configuration-example",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"redocly-config-support",children:"Redocly Config Support"})}),"\n",(0,t.jsxs)(n.p,{children:["Qraft CLI can use a ",(0,t.jsx)(n.a,{href:"https://redocly.com/docs/cli/configuration",children:"Redocly configuration file"})," (",(0,t.jsx)(n.code,{children:"redocly.yaml"}),")\nto generate one or multiple API clients with custom settings and authentication rules. By integrating\nwith Redocly's powerful configuration schema resolution, you can\nstreamline client generation across various services defined in your project."]}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Qraft CLI integrates with Redocly's configuration framework to simplify API client generation. This integration allows you to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Define ",(0,t.jsx)(n.a,{href:"https://redocly.com/docs/cli/configuration/reference/apis",children:"multiple API entry points"})," in a single ",(0,t.jsx)(n.code,{children:"redocly.yaml"})," file"]}),"\n",(0,t.jsxs)(n.li,{children:["Apply consistent ",(0,t.jsx)(n.a,{href:"https://redocly.com/docs/cli/configuration/reference/rules",children:"validation rules"})," and settings across all APIs"]}),"\n",(0,t.jsx)(n.li,{children:"Centralize Qraft CLI options"}),"\n",(0,t.jsxs)(n.li,{children:["Configure ",(0,t.jsx)(n.a,{href:"https://redocly.com/docs/cli/configuration/reference/resolve",children:"authentication and header"})," definitions in one place"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-example-redocly--qraft",children:"Configuration Example: Redocly \ud83e\udd1d Qraft"}),"\n",(0,t.jsxs)(n.p,{children:["Here's a basic example of a ",(0,t.jsx)(n.code,{children:"redocly.yaml"})," configuration file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apis:\n  # Main API configuration\n  main:\n    root: ./openapi.json  # Path to OpenAPI schema\n    # Qraft's specific configuration\n    x-openapi-qraft:\n      output-dir: src/api  # Output directory for a generated API client\n      clean: true          # Clean output directory before generation\n      plugin:\n        tanstack-query-react: true  # Generate React Query hooks\n        openapi-typescript: true    # Generate TypeScript types\n\n  # Legacy API configuration\n  legacy:\n    root: ./legacy-openapi.json\n    x-openapi-qraft:\n      output-dir: src/legacy-api\n      clean: true\n      plugin:\n        tanstack-query-react: true\n        openapi-typescript: true\n      # Filter services to only include user-related endpoints\n      filter-services:\n        - '/users/**'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generating-from-redocly-configuration",children:"Generating from Redocly Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Using the configuration example above, you can generate API clients for both the main and legacy APIs with a single command:"}),"\n",(0,t.jsxs)(o.A,{groupId:"npm2yarn",children:[(0,t.jsx)(l.A,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx @openapi-qraft/cli --redocly\n"})})}),(0,t.jsx)(l.A,{value:"yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn exec @openapi-qraft/cli --redocly\n"})})}),(0,t.jsx)(l.A,{value:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm exec @openapi-qraft/cli --redocly\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"This command will:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Read the ",(0,t.jsx)(n.code,{children:"redocly.yaml"})," configuration"]}),"\n",(0,t.jsx)(n.li,{children:"Generate each API client specified in the configuration"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If your configuration file is located elsewhere, you can specify its path:"}),"\n",(0,t.jsxs)(o.A,{groupId:"npm2yarn",children:[(0,t.jsx)(l.A,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx @openapi-qraft/cli --redocly ./path/to/redocly.yaml\n"})})}),(0,t.jsx)(l.A,{value:"yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn exec @openapi-qraft/cli --redocly ./path/to/redocly.yaml\n"})})}),(0,t.jsx)(l.A,{value:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm exec @openapi-qraft/cli --redocly ./path/to/redocly.yaml\n"})})})]}),"\n",(0,t.jsx)(n.h4,{id:"generating-specific-apis",children:"Generating Specific APIs"}),"\n",(0,t.jsx)(n.p,{children:"You can also generate clients for specific APIs by listing their names:"}),"\n",(0,t.jsxs)(o.A,{groupId:"npm2yarn",children:[(0,t.jsx)(l.A,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx @openapi-qraft/cli legacy --redocly\n"})})}),(0,t.jsx)(l.A,{value:"yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn exec @openapi-qraft/cli legacy --redocly\n"})})}),(0,t.jsx)(l.A,{value:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm exec @openapi-qraft/cli legacy --redocly\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"This is particularly useful when you want to generate only certain APIs from your configuration."}),"\n",(0,t.jsx)(n.h3,{id:"authentication-configuration",children:"Authentication Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["When working with private APIs that require authentication, you can configure authentication headers in your\n",(0,t.jsx)(n.code,{children:"redocly.yaml"})," file. This is particularly useful when your OpenAPI schemas are hosted on private servers or require API keys."]}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of how to configure authentication:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"resolve:\n  http:\n    headers:\n      - matches: https://api.example.com/v2/**\n        name: X-API-KEY\n        envVariable: API_KEY\n      - matches: https://example.com/*/test.yaml\n        name: Authorization\n        envVariable: AUTH_TOKEN\n"})}),"\n",(0,t.jsx)(n.p,{children:"The CLI will automatically use these credentials when fetching the OpenAPI schemas."}),"\n",(0,t.jsx)(n.h3,{id:"extended-configuration-example",children:"Extended Configuration Example"}),"\n",(0,t.jsxs)(n.p,{children:["Here's a more comprehensive example of a ",(0,t.jsx)(n.code,{children:"redocly.yaml"})," configuration that demonstrates advanced features:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# Enforce unique operationIds across all operations\nrules:\n  operation-operationId-unique:\n    severity: 'error'\n\napis:\n  main:\n    root: ../test-fixtures/openapi.json\n    x-openapi-qraft:\n      plugin:\n        tanstack-query-react: true\n        openapi-typescript: true\n      output-dir: src/tests/fixtures/api\n      clean: true\n      # Force .js/.ts extensions in imports (useful for ESM)\n      explicit-import-extensions: true\n      # Custom name for a generated types file\n      openapi-types-file-name: openapi.ts\n      # Filter which services to generate\n      filter-services:\n        - '/approval_policies/**'  # Include all approval policies\n        - '/entities/**'           # Include all entities\n        - '/files/**'             # Include all files\n        - '!/internal/**'         # Exclude internal endpoints\n      # Set default headers for specific endpoints\n      operation-predefined-parameters:\n        '/approval_policies/{approval_policy_id}/**': 'header.x-monite-entity-id'\n        '/entities/{entity_id}/documents': 'header.x-monite-version'\n      # Transform operation names using regex\n      operation-name-modifier:\n        - '/files/list:[a-zA-Z]+List ==> findAll'  # Rename all *List operations to findAll\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},3023:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var a=r(3696);const t={},i=a.createContext(t);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);