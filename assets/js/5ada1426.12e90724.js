"use strict";(self.webpackChunkopenapi_qraft_website=self.webpackChunkopenapi_qraft_website||[]).push([[5215],{4973:(e,t,n)=>{n.d(t,{A:()=>r});n(3696);var i=n(2689);const a={tabItem:"tabItem_wHwb"};var s=n(2540);function r(e){let{children:t,hidden:n,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(a.tabItem,r),hidden:n,children:t})}},8:(e,t,n)=>{n.d(t,{A:()=>w});var i=n(3696),a=n(2689),s=n(4778),r=n(9519),l=n(231),o=n(2239),c=n(5796),u=n(4152);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:i,default:a}}=e;return{value:t,label:n,attributes:i,default:a}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,r.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function p(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=h(e),[r,o]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:s}))),[c,d]=f({queryString:n,groupId:a}),[p,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,u.Dv)(n);return[a,(0,i.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),j=(()=>{const e=c??p;return m({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{j&&o(j)}),[j]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),x(e)}),[d,x,s]),tabValues:s}}var x=n(4613);const j={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var g=n(2540);function b(e){let{className:t,block:n,selectedValue:i,selectValue:r,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const t=e.currentTarget,n=o.indexOf(t),a=l[n].value;a!==i&&(c(t),r(a))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>{o.push(e)},onKeyDown:d,onClick:u,...s,className:(0,a.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":i===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:s}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function y(e){const t=p(e);return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",j.tabList),children:[(0,g.jsx)(b,{...t,...e}),(0,g.jsx)(v,{...t,...e})]})}function w(e){const t=(0,x.A)();return(0,g.jsx)(y,{...e,children:d(e.children)},String(t))}},4886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"query-client/getMutationCache","title":"getMutationCache()","description":"This method returns a MutationCache object that provides access to mutation cache operations","source":"@site/docs/query-client/getMutationCache.mdx","sourceDirName":"query-client","slug":"/query-client/getMutationCache","permalink":"/openapi-qraft/docs/query-client/getMutationCache","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenAPI-Qraft/openapi-qraft/edit/main/website/docs/query-client/getMutationCache.mdx","tags":[],"version":"current","frontMatter":{"sidebar_label":"getMutationCache()"},"sidebar":"mainDocsSidebar","previous":{"title":"getInfiniteQueryState()","permalink":"/openapi-qraft/docs/query-client/getInfiniteQueryState"},"next":{"title":"getMutationKey()","permalink":"/openapi-qraft/docs/query-client/getMutationKey"}}');var a=n(2540),s=n(3023),r=n(8),l=n(4973);const o={sidebar_label:"getMutationCache()"},c="getMutationCache()",u={},d=[{value:"MutationCache.find(...)",id:"mutationcachefind",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"MutationCache.findAll(...)",id:"mutationcachefindall",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Returns",id:"returns-2",level:3},{value:"Examples",id:"examples",level:3}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"getmutationcache",children:"getMutationCache()"})}),"\n",(0,a.jsxs)(t.p,{children:["This method returns a ",(0,a.jsx)(t.code,{children:"MutationCache"})," object that provides access to mutation cache operations\nfor the specific endpoint. The returned object has ",(0,a.jsx)(t.code,{children:"find()"})," and ",(0,a.jsx)(t.code,{children:"findAll()"})," methods\nto search for mutations in the cache."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const mutationCache = qraft.<service>.<operation>.getMutationCache()\n"})}),"\n",(0,a.jsx)(t.h2,{id:"mutationcachefind",children:"MutationCache.find(...)"}),"\n",(0,a.jsx)(t.p,{children:"Finds the first mutation that matches the specified filters."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const mutation = qraft.<service>.<operation>.getMutationCache().find(\n  filters\n)\n"})}),"\n",(0,a.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters: MutationFilters"}),",","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Optional"}),", represents the ",(0,a.jsx)(t.a,{href:"https://tanstack.com/query/latest/docs/framework/react/guides/filters#mutation-filters",children:(0,a.jsx)(t.em,{children:"Mutation Filters \ud83c\udf34"})}),"\nto be used, strictly-typed \u2728"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.parameters: { path, query, header }"})," will be used for filtering mutations by parameters"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.mutationKey: MutationKey"})," will be used for filtering mutations by ",(0,a.jsx)(t.em,{children:"MutationKey"})," instead of parameters","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.mutationKey"})," and ",(0,a.jsx)(t.code,{children:"filters.parameters"})," are mutually exclusive"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.predicate?: (mutation: Mutation) => boolean"})," will be used for filtering mutations by custom predicate"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.exact?: boolean"})," will be used for exact or partial matching of parameters (default: ",(0,a.jsx)(t.code,{children:"true"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Note"}),": When no ",(0,a.jsx)(t.code,{children:"filters"})," are provided, the method uses the base mutation key for ",(0,a.jsx)(t.code,{children:"<service>.<operation>"})," and automatically sets ",(0,a.jsx)(t.code,{children:"exact: false"})," to match all mutations for the endpoint"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"mutation: Mutation | undefined"}),": The first mutation that matches the filters, or ",(0,a.jsx)(t.code,{children:"undefined"})," if no match is found"]}),"\n",(0,a.jsx)(t.h2,{id:"mutationcachefindall",children:"MutationCache.findAll(...)"}),"\n",(0,a.jsx)(t.p,{children:"Finds all mutations that match the specified filters."}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsxs)(l.A,{value:"with-filters",label:(0,a.jsxs)(t.span,{style:{verticalAlign:"middle"},children:["With ",(0,a.jsx)(t.code,{children:"filters"})]}),children:[(0,a.jsxs)(t.p,{children:["Finds all mutations with the specified ",(0,a.jsx)(t.em,{children:"filters"}),"."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const mutations = qraft.<service>.<operation>.getMutationCache().findAll(\n  filters\n)\n"})}),(0,a.jsx)(t.h3,{id:"arguments-1",children:"Arguments"}),(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters: MutationFilters"}),",","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Optional"}),", represents the ",(0,a.jsx)(t.a,{href:"https://tanstack.com/query/latest/docs/framework/react/guides/filters#mutation-filters",children:(0,a.jsx)(t.em,{children:"Mutation Filters \ud83c\udf34"})}),"\nto be used, strictly-typed \u2728"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.parameters: { path, query, header }"})," will be used for filtering mutations by parameters"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.mutationKey: MutationKey"})," will be used for filtering mutations by ",(0,a.jsx)(t.em,{children:"MutationKey"})," instead of parameters","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.mutationKey"})," and ",(0,a.jsx)(t.code,{children:"filters.parameters"})," are mutually exclusive"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.predicate?: (mutation: Mutation) => boolean"})," will be used for filtering mutations by custom predicate"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"filters.exact?: boolean"})," will be used for exact or partial matching of parameters (default: ",(0,a.jsx)(t.code,{children:"true"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Note"}),": When no ",(0,a.jsx)(t.code,{children:"filters"})," are provided, the method uses the base mutation key for ",(0,a.jsx)(t.code,{children:"<service>.<operation>"})," and automatically sets ",(0,a.jsx)(t.code,{children:"exact: false"})," to match all mutations for the endpoint"]}),"\n"]}),"\n"]}),"\n"]}),(0,a.jsx)(t.h3,{id:"returns-1",children:"Returns"}),(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"mutations: Mutation[]"}),": Array of all mutations that match the filters"]})]}),(0,a.jsxs)(l.A,{value:"without-filters",label:(0,a.jsxs)(t.span,{style:{verticalAlign:"middle"},children:["Without ",(0,a.jsx)(t.code,{style:{textDecoration:"line-through"},children:"filters"})]}),children:[(0,a.jsx)(t.p,{children:"Finds all mutations for the specified endpoint."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const mutations = qraft.<service>.<operation>.getMutationCache().findAll()\n"})}),(0,a.jsx)(t.h3,{id:"returns-2",children:"Returns"}),(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"mutations: Mutation[]"}),": Array of all mutations matching ",(0,a.jsx)(t.code,{children:"<service>.<operation>"})]})]})]}),"\n",(0,a.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsxs)(l.A,{value:"find-with-parameters",label:(0,a.jsxs)(t.span,{style:{verticalAlign:"middle"},children:[(0,a.jsx)(t.code,{children:"find()"})," with parameters"]}),children:[(0,a.jsx)(t.p,{children:"Find a mutation with specific parameters:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"/**\n * Find the mutation with the specified parameters:\n * ###\n * POST /entities/3e3e-3e3e-3e3e/documents\n * x-version: 2023-09-01\n **/\nconst mutationCache = qraft.entities.postEntitiesIdDocuments.getMutationCache();\nconst mutation = mutationCache.find({\n  parameters: {\n    header: {\n      'x-version': '2023-09-01',\n    },\n    path: {\n      entity_id: '3e3e-3e3e-3e3e',\n    },\n  },\n});\n\nif (mutation) {\n  console.log('Mutation found:', mutation.state.data);\n}\n"})})]}),(0,a.jsxs)(l.A,{value:"find-with-mutation-key",label:(0,a.jsxs)(t.span,{style:{verticalAlign:"middle"},children:[(0,a.jsx)(t.code,{children:"find()"})," with mutation key"]}),children:[(0,a.jsx)(t.p,{children:"Find a mutation using mutation key:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const mutationCache = qraft.entities.postEntitiesIdDocuments.getMutationCache();\nconst mutationKey = qraft.entities.postEntitiesIdDocuments.getMutationKey({\n  header: {\n    'x-version': '2023-09-01',\n  },\n  path: {\n    entity_id: '3e3e-3e3e-3e3e',\n  },\n});\n\nconst mutation = mutationCache.find({\n  mutationKey,\n});\n\nif (mutation) {\n  console.log('Mutation found:', mutation.state.data);\n}\n"})})]}),(0,a.jsxs)(l.A,{value:"find-with-partial-parameters",label:(0,a.jsxs)(t.span,{style:{verticalAlign:"middle"},children:[(0,a.jsx)(t.code,{children:"find()"})," with partial parameters"]}),children:[(0,a.jsx)(t.p,{children:"Find a mutation with partial parameters (non-exact matching):"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"/**\n * Find mutations that match only header parameters:\n * ###\n * POST /entities/{id}/documents\n * x-version: 2023-09-01\n **/\nconst mutationCache = qraft.entities.postEntitiesIdDocuments.getMutationCache();\nconst mutation = mutationCache.find({\n  exact: false,\n  parameters: {\n    header: {\n      'x-version': '2023-09-01',\n    },\n  },\n});\n\nif (mutation) {\n  console.log('Mutation found with matching header:', mutation.state.data);\n}\n"})})]}),(0,a.jsxs)(l.A,{value:"find-with-predicate",label:(0,a.jsxs)(t.span,{style:{verticalAlign:"middle"},children:[(0,a.jsx)(t.code,{children:"find()"})," with predicate"]}),children:[(0,a.jsx)(t.p,{children:"Find a mutation using custom predicate:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const mutationCache = qraft.entities.postEntitiesIdDocuments.getMutationCache();\nconst mutation = mutationCache.find({\n  predicate: (mutation) => {\n    return mutation.state.data?.header?.['x-version'] === '2023-09-01';\n  },\n});\n\nif (mutation) {\n  console.log('Mutation found with predicate:', mutation.state.data);\n}\n"})})]}),(0,a.jsxs)(l.A,{value:"find-all-without-filters",label:(0,a.jsxs)(t.span,{style:{verticalAlign:"middle"},children:[(0,a.jsx)(t.code,{children:"findAll()"})," without filters"]}),children:[(0,a.jsx)(t.p,{children:"Find all mutations for the endpoint:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"/**\n * Find all mutations for the endpoint:\n * ###\n * POST /entities/3e3e-3e3e-3e3e/documents\n * x-version: 2023-09-01\n * ###\n * POST /entities/4c4c-4c4c-4c4c/documents\n * x-version: 2023-09-01\n * ###\n * \u2b07\ufe0e All mutations for the specified endpoint will be returned\n **/\nconst mutationCache = qraft.entities.postEntitiesIdDocuments.getMutationCache();\nconst mutations = mutationCache.findAll();\n\nconsole.log(`Found ${mutations.length} mutations`);\nmutations.forEach((mutation, index) => {\n  console.log(`Mutation ${index + 1}:`, mutation.state.data);\n});\n"})})]})]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(3696);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);