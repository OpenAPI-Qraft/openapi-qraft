"use strict";(self.webpackChunkopenapi_qraft_website=self.webpackChunkopenapi_qraft_website||[]).push([[6130],{4973:(e,n,r)=>{r.d(n,{A:()=>a});r(3696);var t=r(2689);const i={tabItem:"tabItem_wHwb"};var s=r(2540);function a(e){let{children:n,hidden:r,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,a),hidden:r,children:n})}},8:(e,n,r)=>{r.d(n,{A:()=>q});var t=r(3696),i=r(2689),s=r(4778),a=r(9519),l=r(231),o=r(2239),c=r(5796),u=r(4152);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function h(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function y(e){let{queryString:n=!1,groupId:r}=e;const i=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,o.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function m(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,s=p(e),[a,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[c,d]=y({queryString:r,groupId:i}),[m,f]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,u.Dv)(r);return[i,(0,t.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:i}),b=(()=>{const e=c??m;return h({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{b&&o(b)}),[b]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),f(e)}),[d,f,s]),tabValues:s}}var f=r(4613);const b={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var x=r(2540);function v(e){let{className:n,block:r,selectedValue:t,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,r=o.indexOf(n),i=l[r].value;i!==t&&(c(n),a(i))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{o.push(e)},onKeyDown:d,onClick:u,...s,className:(0,i.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function g(e){let{lazy:n,children:r,selectedValue:s}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function j(e){const n=m(e);return(0,x.jsxs)("div",{className:(0,i.A)("tabs-container",b.tabList),children:[(0,x.jsx)(v,{...n,...e}),(0,x.jsx)(g,{...n,...e})]})}function q(e){const n=(0,f.A)();return(0,x.jsx)(j,{...e,children:d(e.children)},String(n))}},7608:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"hooks/useQuery","title":"useQuery(...)","description":"The Hook enables you to perform asynchronous data fetching operations.","source":"@site/docs/hooks/useQuery.mdx","sourceDirName":"hooks","slug":"/hooks/useQuery","permalink":"/openapi-qraft/docs/hooks/useQuery","draft":false,"unlisted":false,"editUrl":"https://github.com/OpenAPI-Qraft/openapi-qraft/edit/main/website/docs/hooks/useQuery.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"useQuery()"},"sidebar":"mainDocsSidebar","previous":{"title":"Cookie Authentication","permalink":"/openapi-qraft/docs/authorization/cookie-authentication"},"next":{"title":"useMutation()","permalink":"/openapi-qraft/docs/hooks/useMutation"}}');var i=r(2540),s=r(3023),a=r(8),l=r(4973);const o={sidebar_position:2,sidebar_label:"useQuery()"},c="useQuery(...)",u={},d=[{value:"Returns",id:"returns",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Example",id:"example",level:3},{value:"Why POST for reading data?",id:"why-post-for-reading-data",level:4},{value:"\u203c\ufe0f Non-serializable values in body",id:"\ufe0f-non-serializable-values-in-body",level:4},{value:"Example 1: All services but no callbacks by default",id:"example-1-all-services-but-no-callbacks-by-default",level:4},{value:"Example 2: Specific callbacks but no services by default",id:"example-2-specific-callbacks-but-no-services-by-default",level:4},{value:"Example 3: Minimal API client (no services, no callbacks by default)",id:"example-3-minimal-api-client-no-services-no-callbacks-by-default",level:4}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"usequery",children:"useQuery(...)"})}),"\n",(0,i.jsxs)(n.p,{children:["The Hook enables you to perform asynchronous data fetching operations.\nIt automatically handles loading states, caching, and data invalidation,\nsignificantly simplifying request in React.\nSee the TanStack ",(0,i.jsx)(n.a,{href:"https://tanstack.com/query/latest/docs/framework/react/reference/useQuery",children:(0,i.jsx)(n.em,{children:"useQuery(...) \ud83c\udf34"})}),"\ndocumentation for more details."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const query = api.<service>.<operation>.useQuery(\n  parameters,\n  queryOptions\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"UseQueryResult"})," object, see the TanStack ",(0,i.jsx)(n.a,{href:"https://tanstack.com/query/latest/docs/framework/react/reference/useQuery#:~:text=will%20be%20used.-,Returns,-status%3A%20String",children:(0,i.jsx)(n.em,{children:"UseQueryResult \ud83c\udf34"})})]}),"\n",(0,i.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"parameters: { path, query, header, body? } | QueryKey | void"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Required only if OpenAPI specification defines required parameters"})}),"\n",(0,i.jsx)(n.li,{children:"If the operation has no required parameters according to OpenAPI, you can omit this argument"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parameters"})," will be used to generate the ",(0,i.jsx)(n.code,{children:"QueryKey"})]}),"\n",(0,i.jsxs)(n.li,{children:["For write operations (when using ",(0,i.jsx)(n.code,{children:"--queryable-write-operations"}),"), you can include a ",(0,i.jsx)(n.code,{children:"body"})," parameter"]}),"\n",(0,i.jsxs)(n.li,{children:["Instead of an object with ",(0,i.jsx)(n.code,{children:"{ path, query, header, body }"}),", you can pass a ",(0,i.jsx)(n.code,{children:"QueryKey"})," as an array\nwhich is also strictly-typed"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"queryOptions?: UseQueryOptions"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional"}),", represents the options of the ",(0,i.jsx)(n.a,{href:"https://tanstack.com/query/latest/docs/framework/react/reference/useQuery",children:(0,i.jsx)(n.em,{children:"useQuery(...) \ud83c\udf34"})})," Hook","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"queryOptions.queryFn"})," could be provided to override the default ",(0,i.jsx)(n.code,{children:"queryFn"})," used by Qraft"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["By default, ",(0,i.jsx)(n.code,{children:"useQuery"})," hooks are only generated for read operations (",(0,i.jsx)(n.em,{children:"GET"})," method). If you want to use query\nhooks for write operations (",(0,i.jsx)(n.em,{children:"POST"}),", ",(0,i.jsx)(n.em,{children:"PUT"}),", ",(0,i.jsx)(n.em,{children:"PATCH"})," methods), use the ",(0,i.jsx)(n.code,{children:"--queryable-write-operations"})," CLI option\nduring code generation."]})}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(l.A,{value:"parameters",label:(0,i.jsxs)(n.span,{style:{verticalAlign:"middle"},children:["by ",(0,i.jsx)(n.code,{children:"parameters"})]}),default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="src/ApprovalPolicyName.tsx"',children:'import { createAPIClient } from \'./api\'; // generated by OpenAPI Qraft CLI\n\nimport { requestFn } from \'@openapi-qraft/react\';\nimport { QueryClient, QueryClientProvider } from \'@tanstack/react-query\';\n\nconst queryClient = new QueryClient();\n\nconst api = createAPIClient({\n  requestFn,\n  queryClient,\n  baseUrl: \'https://api.sandbox.monite.com/v1\',\n});\n\nfunction ApprovalPolicyName() {\n  /**\n   * `<service>.<operation>.useQuery(...)` initiates the request to retrieve data:\n   * ###\n   * GET /approval_policies/321?items_order=asc&items_order=desc\n   * x-monite-version: 1.0.0\n   */\n  const { data, error, isPending } =\n    api.approvalPolicies.getApprovalPoliciesId.useQuery(\n      {\n        header: {\n          "x-monite-version": "1.0.0",\n        },\n        path: {\n          approval_policy_id: "123",\n        },\n        query: {\n          items_order: ["asc", "desc"],\n        },\n      },\n    );\n\n  if (isPending) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return <div>Approval Policy: {data?.name}</div>;\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApprovalPolicyName />\n    </QueryClientProvider>\n  );\n}\n'})})}),(0,i.jsxs)(l.A,{value:"query-key",label:(0,i.jsxs)(n.span,{style:{verticalAlign:"middle"},children:["by ",(0,i.jsx)(n.code,{children:"QueryKey"})]}),children:[(0,i.jsxs)(n.p,{children:["Using the Query Key (array) as an arguments for the ",(0,i.jsx)(n.code,{children:"useQuery"})," is useful\nwith combination of ",(0,i.jsx)(n.a,{href:"/openapi-qraft/docs/query-client/getQueryKey",children:(0,i.jsx)(n.code,{children:"api.<service>.<operation>.getQueryKey(...)"})})," method\nwhen shared Query Key is needed."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="src/ApprovalPolicyName.tsx"',children:'import { createAPIClient } from \'./api\'; // generated by OpenAPI Qraft CLI\n\nimport { requestFn } from \'@openapi-qraft/react\';\nimport { QueryClient, QueryClientProvider } from \'@tanstack/react-query\';\n\nconst queryClient = new QueryClient();\n\nconst api = createAPIClient({\n  requestFn,\n  queryClient,\n  baseUrl: \'https://api.sandbox.monite.com/v1\',\n});\n\nfunction ApprovalPolicyName() {\n  /**\n   * `<service>.<operation>.useQuery(...)` initiates the request to retrieve data:\n   * ###\n   * GET /approval_policies/123?items_order=asc&items_order=desc\n   * x-monite-version: 2.0.0\n   */\n  const { data, error, isPending } =\n    api.approvalPolicies.getApprovalPoliciesId.useQuery(\n      [\n        {\n          method: "get",\n          url: "/approval_policies/{approval_policy_id}",\n        },\n        {\n          header: {\n            "x-monite-version": "2.0.0",\n          },\n          path: {\n            approval_policy_id: "321",\n          },\n          query: {\n            items_order: ["asc", "desc"],\n          },\n        },\n      ],\n    );\n\n\n  if (isPending) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return <div>Approval Policy: {data?.name}</div>;\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ApprovalPolicyName />\n    </QueryClientProvider>\n  );\n}\n'})})]}),(0,i.jsxs)(l.A,{value:"write-operation",label:(0,i.jsxs)(n.span,{style:{verticalAlign:"middle"},children:["with ",(0,i.jsx)(n.code,{children:"body"})]}),children:[(0,i.jsxs)(n.p,{children:["When using the ",(0,i.jsx)(n.code,{children:"--queryable-write-operations"})," option, you can use ",(0,i.jsx)(n.code,{children:"useQuery"})," with write operations like ",(0,i.jsx)(n.em,{children:"POST"}),", ",(0,i.jsx)(n.em,{children:"PUT"}),", ",(0,i.jsx)(n.em,{children:"PATCH"}),", etc.\nThis is particularly useful for APIs that use ",(0,i.jsx)(n.em,{children:"POST"})," for read operations (like GraphQL or some RPC-style APIs)."]}),(0,i.jsx)(n.h4,{id:"why-post-for-reading-data",children:"Why POST for reading data?"}),(0,i.jsxs)(n.p,{children:["Some APIs, particularly GraphQL, use ",(0,i.jsx)(n.em,{children:"POST"})," requests for reading data instead of ",(0,i.jsx)(n.em,{children:"GET"}),". This design is often chosen for several reasons:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Complex query structures are better sent in a request body than in a URL"}),"\n",(0,i.jsx)(n.li,{children:"Query strings have length limitations in some browsers and servers"}),"\n"]}),(0,i.jsxs)(n.p,{children:["In this example, we're using ",(0,i.jsx)(n.em,{children:"POST"})," to fetch product data by sending search criteria in the request ",(0,i.jsx)(n.code,{children:"body"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="src/SearchProducts.tsx"',children:'import { createAPIClient } from \'./api\'; // generated by OpenAPI Qraft CLI\n\nimport { requestFn } from \'@openapi-qraft/react\';\nimport { QueryClient, QueryClientProvider } from \'@tanstack/react-query\';\n\nconst queryClient = new QueryClient();\n\nconst api = createAPIClient({\n  requestFn,\n  queryClient,\n  baseUrl: \'https://api.sandbox.monite.com/v1\',\n});\n\nfunction SearchProducts() {\n  /**\n   * `<service>.<operation>.useQuery(...)` initiates a POST request for searching products:\n   * ###\n   * POST /products/search\n   *\n   * {\n   *   "query": "laptop",\n   *   "filters": {\n   *     "minPrice": 500,\n   *     "category": "electronics"\n   *   }\n   * }\n   */\n  const { data, error, isPending } =\n    api.products.postProductsSearch.useQuery({\n      body: {\n        query: "laptop",\n        filters: {\n          minPrice: 500,\n          category: "electronics"\n        }\n      },\n    });\n\n  if (isPending) {\n    return <div>Loading products...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h2>Search Results</h2>\n      <ul>\n        {data?.products.map(product => (\n          <li key={product.id}>\n            {product.name} - ${product.price}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SearchProducts />\n    </QueryClientProvider>\n  );\n}\n'})}),(0,i.jsx)(n.h4,{id:"\ufe0f-non-serializable-values-in-body",children:"\u203c\ufe0f Non-serializable values in body"}),(0,i.jsxs)(n.p,{children:["If you plan to use non-serializable values (like ",(0,i.jsx)(n.code,{children:"FormData"}),", ",(0,i.jsx)(n.code,{children:"Blob"}),", ",(0,i.jsx)(n.code,{children:"File"}),") in the ",(0,i.jsx)(n.code,{children:"body"})," parameter, be aware that\nthey cannot be reliably used to form ",(0,i.jsx)(n.code,{children:"QueryKey"}),". TanStack Query requires Query Keys to be serializable primitives."]}),(0,i.jsxs)(n.p,{children:["In such cases, it's better to use ",(0,i.jsx)(n.code,{children:"useMutation"})," instead of ",(0,i.jsx)(n.code,{children:"useQuery"}),".\nIf you really need to use ",(0,i.jsx)(n.code,{children:"useQuery"})," with non-serializable values, you can customize the query key hash function:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"const queryClient = new QueryClient({\n  defaultOptions: { queries: { queryKeyHashFn: myCustomQueryKeyHashFn } }\n});\n"})})]}),(0,i.jsxs)(l.A,{value:"custom-api-client",label:(0,i.jsxs)(n.span,{style:{verticalAlign:"middle"},children:["with ",(0,i.jsx)(n.code,{children:"--create-api-client-fn"})," option"]}),children:[(0,i.jsxs)(n.p,{children:["Using the ",(0,i.jsx)(n.code,{children:"--create-api-client-fn"})," option allows you to customize the API client creation function with specific parameters.\nYou can specify which services and callback functions should be included in the client by default."]}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udca1 When generating multiple API client functions with different parameters, it might be more convenient to use a configuration file\ninstead of command-line parameters. See the ",(0,i.jsx)(n.a,{href:"/openapi-qraft/docs/codegen/CLI/redocly-config#generating-multiple-api-client-functions",children:"Redocly configuration documentation"}),"\nfor more details on how to configure multiple ",(0,i.jsx)(n.em,{children:"create API client functions"})," in a YAML file."]}),"\n"]}),(0,i.jsx)(n.h4,{id:"example-1-all-services-but-no-callbacks-by-default",children:"Example 1: All services but no callbacks by default"}),(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Generate a client with ",(0,i.jsx)(n.strong,{children:"all services"})," but ",(0,i.jsx)(n.strong,{children:"no callbacks"})," by default"]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--create-api-client-fn createServicesOnlyClient services:all callbacks:none\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="src/ServicesOnlyClient.tsx"',children:"import { createServicesOnlyClient } from './api/create-services-only-client';\nimport { requestFn } from '@openapi-qraft/react';\nimport { useQuery } from '@openapi-qraft/react/callbacks';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nconst queryClient = new QueryClient();\n\n// Create a client with all services but we need to explicitly specify which callbacks to use\nconst api = createServicesOnlyClient(\n  {\n    requestFn,\n    queryClient,\n    baseUrl: 'https://api.example.com/v1',\n  },\n  // All services are available by default\n  // We only need to specify the callbacks we want to use\n  {\n    // 1\ufe0f\u20e3 Specify which callbacks we want to include\n    useQuery,\n  }\n});\n\nfunction UserProfile() {\n  // We can use the useQuery hook because we explicitly enabled it\n  const { data, error, isPending } =\n    api.users.getUserById.useQuery({\n      path: { userId: \"123\" },\n    });\n\n  if (isPending) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return <div>User name: {data?.name}</div>;\n}\n"})}),(0,i.jsx)(n.h4,{id:"example-2-specific-callbacks-but-no-services-by-default",children:"Example 2: Specific callbacks but no services by default"}),(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Generate a client with ",(0,i.jsx)(n.strong,{children:"specific callbacks"})," but ",(0,i.jsx)(n.strong,{children:"no services"})," by default"]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--create-api-client-fn createCallbacksOnlyClient services:none callbacks:useQuery,useMutation\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="src/CallbacksOnlyClient.tsx"',children:"import { createCallbacksOnlyClient } from './api/create-callbacks-only-client';\nimport { users } from './api/services/Users'; // Import only needed service (\u203c\ufe0f)\nimport { requestFn } from '@openapi-qraft/react';\nimport { useSuspenseQuery } from '@openapi-qraft/react/callbacks';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nconst queryClient = new QueryClient();\n\n// Create a client with useQuery and useMutation callbacks but we need to explicitly specify which services to use\nconst usersAPI = createCallbacksOnlyClient(\n  // 1\ufe0f\u20e3 Specify which service (\u203c\ufe0f) we want to include\n  users,\n  {\n    requestFn,\n    queryClient,\n    baseUrl: 'https://api.example.com/v1',\n  },\n  // 2\ufe0f\u20e3 Specify which callbacks we want to include\n  // \u2714\ufe0e useQuery and useMutation callbacks are already included by default\n  {\n    useSuspenseQuery,\n  }\n);\n\nfunction UserProfile() {\n  // \ud83d\udca1 We can use the useQuery hook as it's included by default\n  const { data, error, isPending } =\n    usersAPI.getUserById.useQuery({\n      path: { userId: \"123\" },\n    });\n\n  // \ud83d\udc8e We can also use the useSuspenseQuery hook because we explicitly enabled it\n  const { data: allUsers } = usersAPI.allUserList.useSuspenseQuery();\n\n  if (isPending) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <>\n      <div>User name: {data?.name}</div>\n      <h4>All users:</h4>\n      <ul>{allUsers.map(user => <li key={user.id}>{user.name}</li>)}</ul>\n    </>\n  );\n}\n"})}),(0,i.jsx)(n.h4,{id:"example-3-minimal-api-client-no-services-no-callbacks-by-default",children:"Example 3: Minimal API client (no services, no callbacks by default)"}),(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Generate a completely minimal client with ",(0,i.jsx)(n.strong,{children:"nothing included"})," by default"]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--create-api-client-fn createMinimalAPIClient services:none callbacks:none\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="src/MinimalApiClient.tsx"',children:"import { createMinimalAPIClient } from './api/create-minimal-api-client';\nimport { requestFn } from '@openapi-qraft/react';\nimport { getUserById } from './api/services/Users'; // Import only needed operation (\u2757)\nimport { useQuery } from '@openapi-qraft/react/callbacks';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nconst queryClient = new QueryClient();\n\n// Create a minimal client by explicitly specifying only the necessary operation (\u2757) and callbacks\nconst getUserByIdAPI = createMinimalAPIClient(\n  // 1\ufe0f\u20e3 Explicitly specify which operation(\u2757) or service(\u203c\ufe0f) we need\n  getUserById, // You could also use `users`, `{ users, files }`.\n  {\n    requestFn,\n    queryClient,\n    baseUrl: 'https://api.example.com/v1',\n  },\n  // 2\ufe0f\u20e3 Explicitly specify which callbacks we need\n  {\n    useQuery,\n  }\n});\n\nfunction UserProfile() {\n  const { data, error, isPending } =\n    getUserByIdAPI.useQuery({\n      path: { userId: \"123\" },\n    });\n\n  if (isPending) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return <div>User name: {data?.name}</div>;\n}\n"})})]})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},3023:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(3696);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);